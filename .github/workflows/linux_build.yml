name: Linux Build

on:
  push:
  pull_request:

env:
  GH_CACHE_KEY: 3

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        env: [
          {build_type: Release, arch: x86_64, name: "D3D9 + Sokol", cmake: "-DOPTION_D3D9=ON -DOPTION_SOKOL=ON"},
          {build_type: Debug,   arch: x86_64, name: "D3D9 + Sokol + Asserts", cmake: "-DOPTION_D3D9=ON -DOPTION_SOKOL=ON -DOPTION_DEBUG_ASSERT=ON"},
        ]
    name: ${{matrix.env.build_type}} ${{matrix.env.arch}}
    runs-on: ubuntu-latest
    container:
      image: "debian:buster"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        id: cache
        with:
          path: |
            /opt/src
            /opt/out
          key: Linux-${{matrix.env.arch}}-${{ env.GH_CACHE_KEY }}
      - name: prepare env
        run: |
          chmod a+x ./docker/linux/prepare_pkgs
          ./docker/linux/prepare_pkgs
      - name: build ffmpeg
        run: |
          chmod a+x ./docker/linux/prepare_ffmpeg
          ./docker/linux/prepare_ffmpeg
        if: steps.cache.outputs.cache-hit != 'true'
      - name: build sdl2
        run: |
          chmod a+x ./docker/linux/prepare_sdl_pkgs
          chmod a+x ./docker/linux/prepare_sdl
          ./docker/linux/prepare_sdl_pkgs
          ./docker/linux/prepare_sdl
        if: steps.cache.outputs.cache-hit != 'true'
      - name: build
        run: |
          chmod a+x ./docker/linux/builder
          export LIBS_ROOT=/opt/out
          ./docker/linux/builder \
            -DCMAKE_BUILD_TYPE=${{matrix.env.build_type}} \
            ${{matrix.env.cmake}}
      - uses: actions/upload-artifact@v3
        with:
          name: Perimeter ${{matrix.env.build_type}} ${{matrix.env.arch}}
          path: ./build/docker-linux/output/Perimeter.tar
  check_build:
    strategy:
      fail-fast: false
      matrix:
        env: [
          {build_type: Release, arch: x86_64, name: "D3D9 + Sokol", cmake: "-DOPTION_D3D9=ON -DOPTION_SOKOL=ON"},
          {build_type: Debug,   arch: x86_64, name: "D3D9 + Sokol", cmake: "-DOPTION_D3D9=ON -DOPTION_SOKOL=ON"},
          {build_type: Debug,   arch: x86_64, name: "D3D9", cmake: "-DOPTION_D3D9=ON -DOPTION_SOKOL=OFF"},
          {build_type: Debug,   arch: x86_64, name: "Sokol", cmake: "-DOPTION_D3D9=OFF -DOPTION_SOKOL=ON"},
          {build_type: Release, arch: x86_64, name: "Scripts Check", cmake: "-DOPTION_CHECK_SCRIPTS=ON "},
        ]
    name: Check build ${{matrix.env.build_type}} ${{matrix.env.arch}} ${{matrix.env.name}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: update repos
        run: sudo apt-get update
      - name: install libs
        run: sudo apt-get install cmake meson libsdl2-dev libsdl2-image-dev libsdl2-net-dev libsdl2-mixer-dev libboost-dev libavcodec-dev libavformat-dev libavfilter-dev libswscale-dev zlib1g-dev libvulkan-dev glslang-tools lld
      - name: create build dir
        run: mkdir build
      - name: configure
        run: cmake .. -G Ninja \
          -DCMAKE_BUILD_TYPE=${{matrix.env.build_type}} \
          -DOPTION_DEBUG_ASSERT=ON \
          -DOPTION_USE_BACKTRACE=ON \
          ${{matrix.env.cmake}}
        working-directory: build
      - name: build dependencies
        run: ninja dependencies
        working-directory: build
      - name: Scripts check
        run: ninja ScriptsCheck
        working-directory: build
        if: matrix.env.name == 'Scripts Check'
      - name: build project
        run: ninja
        working-directory: build
        if: matrix.env.name != 'Scripts Check'
